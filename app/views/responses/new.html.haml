.container
  = render partial: 'header'

  %section#introduction
    :markdown
      #{Mustache.render(@questionnaire.introduction, number_of_participants: @questionnaire.responses.count)}

  = bootstrap_form_for @response, html: {class: 'form-horizontal js-new-response'} do |f|
    - if !@questionnaire.current? || params[:token]
      = hidden_field_tag :token, @questionnaire.authorization_token
    %section#questionnaire
      - unless simple_navigation?
        %nav
          %ul.nav.nav-pills
            = render partial: 'nav'

      #message(class="message #{'simple' if simple_navigation?}")
        - if @questionnaire.instructions.present?
          :markdown
            <div>#{@questionnaire.instructions}</div>
        - elsif @questionnaire.starting_balance && @questionnaire.starting_balance.nonzero?
          - if @questionnaire.starting_balance > 0
            =t '.positive_balance_instructions', starting_balance: number_to_currency(@questionnaire.starting_balance)
          - else
            =t '.negative_balance_instructions', starting_balance: number_to_currency(-@questionnaire.starting_balance)
        - else
          =t '.instructions'

      #whitespace(aria-hidden="true")

      - if @questionnaire.assessment?
        #assessment.alert.alert-info
          %label(for="response_assessment")
            #{t '.assessment'}<!--[if lt IE 10]> #{t '.default_assessment', number: number_to_currency(@questionnaire.default_assessment)}<![endif]-->#{t :colon}
          #{t '.currency_unit_pre'}
          #{f.text_field :assessment, placeholder: number_with_delimiter(@questionnaire.default_assessment), class: 'span2'}
          #{t '.currency_unit_post'}

      = render @questionnaire

    - if @questionnaire.tax_rate?
      #reminder.message.hide

    %section#identification
      = f.input :initialized_at, as: :hidden
      - if @fields.any?
        - @fields.each_with_index do |section,index|
          = f.inputs name: section.title do
            -# @todo It's not very flexible to add email and name like this, but it works for now.
            - if index.zero?
              = f.input :comments, wrapper_html: {class: 'hide'}
              - if section.description?
                .control-group
                  .controls
                    :markdown
                      #{section.description}
              - if @questionnaire.email_required?
                = f.input :email, wrapper_html: {id: 'group-email'}, required: true, input_html: {class: 'validate[required,custom[email]]'}
              - else
                = f.input :email, wrapper_html: {id: 'group-email'}, input_html: {class: 'validate[custom[email]]'}
              = f.input :name, wrapper_html: {id: 'group-name'}
            - section.questions.each do |q|
              .control-group(id="group-#{q.id}")
                - unless %w(checkbox readonly).include?(q.widget)
                  %label.control-label(for="#{q.id}")
                    = q.title
                    - if q.required?
                      %abbr(title="#{t '.required'}")*
                .controls
                  - if q.widget == 'checkbox'
                    = hidden_field_tag q.id, '0' # Mimic an unchecked box.
                    %label.checkbox(for="#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}")
                      = check_box_tag q.id, '1', q.checked?, html_attributes(q)
                      = q.title
                      - if q.required?
                        %abbr(title="#{t '.required'}")*
                  - elsif q.widget == 'checkboxes'
                    - q.options.each do |option|
                      %label.checkbox.inline(for="#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}")
                        = check_box_tag "#{q.id}[]", option, q.default_value == option, html_attributes(q), id: "#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}"
                        = option
                  - elsif q.widget == 'radio'
                    - q.options.each do |option|
                      %label(class="#{q.options.size > 4 ? "radio" : "radio inline"}" for="#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}")
                        = radio_button_tag q.id, option, q.default_value == option, html_attributes(q)
                        = option
                  - elsif q.widget == 'select'
                    = select_tag q.id, options_for_select([nil] + q.options, q.default_value), html_attributes(q)
                  - elsif q.widget == 'text'
                    = text_field_tag q.id, nil, html_attributes(q)
                  - elsif q.widget == 'textarea'
                    = text_area_tag q.id, nil, html_attributes(q)
                  - elsif q.widget == 'readonly'
                    - if q.title?
                      %h3= q.title
                  - if q.description?
                    - if q.widget == 'readonly'
                      :markdown
                        #{q.description}
                    - else
                      :markdown
                        <p class="inline-hints">#{q.description}</p>
      = f.actions do
        %p=t '.submit_text'
        = f.action :submit, label: t('.submit')

  = render 'footer', disabled: 'false'

- content_for :footer do
  = render partial: 'hidden'
