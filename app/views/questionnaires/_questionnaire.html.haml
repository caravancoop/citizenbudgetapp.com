- if @questionnaire.stylesheet?
  - content_for :head do
    %style
      = @questionnaire.stylesheet.html_safe
- @simulator.each do |section|
  %table(id="#{table_id(section)}" class="#{section.group}")
    %thead
      - unless section.title.blank? && section.nonbudgetary?
        %tr
          - if section.nonbudgetary?
            %th.category(id="th1-#{section.id}" colspan="2" scope="col")
              %h4
                = render partial: 'title', locals: {object: section, placement: 'bottom'}

          - else
            %th.category(id="th1-#{section.id}" scope="col")
              %h4
                = render partial: 'title', locals: {object: section, placement: 'bottom'}
            %th.column.highlight(id="th2-#{section.id}" scope="col")
              =t '.your_choice'

      - if section.description?
        %tr
          %td.description(colspan="2")
            :markdown
              #{section.description}
      - if section.criterion?
        %tr
          %td(colspan="2")
            %label(for="criteria")= t :criterion_select_label
            = select_tag :criteria, options_for_select(section.criterion), class: 'js-criteria-select', alt: t(".alt_select"), prompt: ''
    %tbody
      - section.questions.each do |q|
        - unless @response.persisted? && %w(text textarea).include?(q.widget)
          %tr(class="#{'hidden' if q.criteria?}" id="question-#{q.id}" data-criteria="#{q.criteria}" aria-hidden="#{q.criteria?}")
            - if q.readonly?
              %td.description(colspan="2")
                - if q.title?
                  .header
                    = render partial: 'title', locals: {object: q, placement: 'bottom'}
                - if q.description?
                  :markdown
                    #{q.description}
            - elsif q.widget == 'static'
              %td.description
                .header
                  = render partial: 'title', locals: {object: q, placement: 'top'}
                - if q.description?
                  :markdown
                    #{q.description}
              %td.highlight(headers="th2-#{section.id}")
                %div(class="widget widget-#{q.widget}")
                  .control.control-static(data-widget="#{q.widget}" data-value="#{q.unit_amount}")
            - elsif q.nonbudgetary?
              %td.description(colspan="2")
                - if %w(select text textarea).include?(q.widget)
                  = label_tag nil, class: 'header', for: "#{sanitize_to_id(q.id)}" do
                    = render partial: 'title', locals: {object: q, placement: 'bottom'}
                - else
                  .header
                    = render partial: 'title', locals: {object: q, placement: 'bottom'}
                - if q.description?
                  :markdown
                    #{q.description}
                - # @todo Implement checkbox widget.
                - if %w(checkboxes radio).include?(q.widget)
                  %fieldset
                    %legend.legend-hidden
                      "#{q.title}"
                    .control-group
                      .controls
                        - if q.widget == 'checkboxes'
                          - q.options.each do |option|
                            = label_tag nil, class: 'checkbox', for: "#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}" do
                              - if @response.persisted?
                                = check_box_tag "#{q.id}[]", option, @response.answer(q).include?(option), {id: "#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}", disabled: true, alt: t(".alt_checkboxes")}
                              - else
                                = check_box_tag "#{q.id}[]", option, false, id: "#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}", alt: t(".alt_checkboxes")
                              = option
                        - elsif q.widget == 'radio'
                          - q.options.each do |option|
                            = label_tag nil, class: 'radio', for: "#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}" do
                              - if @response.persisted?
                                = radio_button_tag q.id, option, @response.answer(q) == option, disabled: true, alt: t(".alt_radio")
                              - else
                                = radio_button_tag q.id, option, false, alt: t(".alt_radio")
                              = option
                - elsif %w(select text textarea).include?(q.widget)
                  - if q.widget == 'select'
                    = select_tag q.id, options_for_select(q.options, @response.answer(q)), html_attributes(q, alt: t(".alt_text"))
                  - elsif q.widget == 'text'
                    = text_field_tag q.id, nil, html_attributes(q, alt: t(".alt_text"))
                  - elsif q.widget == 'textarea'
                    = text_area_tag q.id, nil, html_attributes(q, alt: t(".alt_text"))
            - elsif q.widget == 'option'
              %td.description(colspan="2")
                .header
                  = render partial: 'title', locals: {object: q, placement: 'top'}
                - if q.description?
                  :markdown
                    #{q.description}
                %fieldset
                  %legend.legend-hidden
                    "#{q.title}"
                  .control-group
                    .controls
                      - q.options.each_with_index do |option,i|
                        .control.control-option
                          = label_tag nil, class: 'radio', for: "#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}_#{i}" do
                            - if @response.persisted?
                              = radio_button_tag q.id, option, @response.answer(q) == option, 'id' => "#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}_#{i}", 'class' => 'option', 'data-initial' => q.default_value, 'data-revenue' => q.revenue?, 'data-actual' => @response.answer(q), 'disabled' => 'disabled', 'alt' => t(".alt_radio")
                            - else
                              = radio_button_tag q.id, option, q.selected?(option), 'id' => "#{sanitize_to_id(q.id)}_#{sanitize_to_id(option)}_#{i}", 'class' => 'option', 'data-initial' => q.default_value, 'data-revenue' => q.revenue?, 'alt' => t(".alt_radio")
                            :markdown
                              #{q.labels[i]}
            - else # budgetary
              %td.description
                .header
                  = render partial: 'title', locals: {object: q, placement: 'top'}
                - if q.description?
                  :markdown
                    #{q.description}
              %td.highlight(headers="th2-#{section.id}")
                %div(class="widget widget-#{q.widget}")
                  - if %w(scaler slider).include?(q.widget)
                    .impact
                      %span.key
                      %span.value= number_to_currency 0
                    - if q.widget == 'scaler'
                      - if @questionnaire.mode == 'taxes'
                        .note=t @questionnaire.assessment_period, scope: :assessment_unit
                        .meta.maximum.taxes +
                        .meta.minimum.taxes -
                      - else
                        .meta.maximum= number_to_percentage(q.maximum_units * 100)
                        .meta.minimum= number_to_percentage(q.minimum_units * 100)
                    - elsif q.yes_no?
                      .meta.maximum=t :yes_label
                      .meta.minimum=t :no_label
                    - else
                      .meta.maximum=  number_with_precision(q.maximum_units)
                      .meta.minimum= [number_with_precision(q.minimum_units), q.unit_name].compact.join ' '
                    - if @response.persisted?
                      .control.control-slider.slider(data-widget="#{q.widget}" data-value="#{q.unit_amount}" data-initial="#{q.default_value}" data-minimum="#{q.minimum_units}" data-maximum="#{q.maximum_units}" data-step="#{q.step}" data-yes-no="#{q.yes_no? && 1}" data-revenue="#{q.revenue?}" data-actual="#{@response.answer(q)}" disabled="disabled")
                        = range(q)
                    - else
                      .control.control-slider.slider(data-widget="#{q.widget}" data-value="#{q.unit_amount}" data-initial="#{q.default_value}" data-minimum="#{q.minimum_units}" data-maximum="#{q.maximum_units}" data-step="#{q.step}" data-yes-no="#{q.yes_no? && 1}" data-revenue="#{q.revenue?}")
                        = range(q)

                    - if q.omit_amounts?
                      .meta.maximum.maximum-amount &nbsp;
                      .meta.minimum.minimum-amount &nbsp;
                    - else
                      .meta.maximum.maximum-amount
                        = currency q.maximum_amount
                      .meta.minimum.minimum-amount
                        = currency q.minimum_amount
                  - elsif q.widget == 'onoff'
                    .impact
                      %span.key
                      %span.value= number_to_currency 0
                    .control.control-onoff
                      = hidden_field_tag q.id, '0', id: "#{q.id}_2" # Mimic an unchecked box.
                      = label_tag q.id do
                        - if @response.persisted?
                          = check_box_tag q.id, '1', @response.answer(q) == '1', 'class' => 'onoff', 'data-value' => q.unit_amount, 'data-initial' => q.default_value, 'data-no-label' => q.no_label, 'data-yes-label' => q.yes_label, 'data-revenue' => q.revenue?, 'data-actual' => @response.answer(q), 'disabled' => 'disabled', 'alt' => t(".alt_onoff")
                        - else
                          = check_box_tag q.id, '1', q.checked?, 'class' => 'onoff', 'data-value' => q.unit_amount, 'data-initial' => q.default_value, 'data-no-label' => q.no_label, 'data-yes-label' => q.yes_label, 'data-revenue' => q.revenue?, 'alt' => t(".alt_onoff")
                    %div(class="meta maximum maximum-amount#{' changed' if q.unchecked?}")
                      = currency q.maximum_amount
                    %div(class="meta minimum minimum-amount#{' changed' if q.checked?}")
                      = currency q.minimum_amount
          - if @response.persisted? && @questionnaire.starts_at && @questionnaire.starts_at > Time.new(2014, 5, 15) # @todo Remove conditional
            %tr.graph-container
              %td(colspan="2")
                .graph{:id => "graph_#{q.id}"}
